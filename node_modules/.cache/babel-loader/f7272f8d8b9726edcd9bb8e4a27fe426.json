{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/abrikos/WebstormProjects/math/src/components/Pager.js\",\n    _s = $RefreshSig$();\n\nimport { Pagination } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nPager.propTypes = {\n  count: PropTypes.number.isRequired,\n  filter: PropTypes.object.isRequired,\n  onPageChange: PropTypes.func.isRequired\n};\nexport default function Pager(props) {\n  _s();\n\n  const [pages, setPages] = useState([]);\n  const [page, setPage] = useState(0);\n  const totalPages = Math.ceil(props.count / (props.filter.limit || 10));\n  const paginationLength = 5;\n  useEffect(calcPages, []);\n\n  function setCurrentPage(p) {\n    if (p < 0 || p >= totalPages) return;\n    calcPages(p);\n    const f = { ...props.filter\n    };\n    f.skip = f.limit * p;\n    setPage(p);\n    props.onPageChange(f);\n  }\n\n  function calcPages(page) {\n    if (!page) page = 1;\n    let pgs = [];\n    const from = paginationLength * Math.floor(page / paginationLength);\n    const to = from + paginationLength > totalPages ? totalPages : from + paginationLength;\n\n    for (let i = from; i < to; i++) {\n      pgs.push(i);\n    }\n\n    setPages(pgs);\n  }\n\n  if (pages.length < 2) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 34\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center\",\n    children: /*#__PURE__*/_jsxDEV(Pagination, {\n      children: [page >= paginationLength && /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => setCurrentPage(0),\n        children: \"<<\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 42\n      }, this), !!page && /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => setCurrentPage(page - 1),\n        children: \"<\"\n      }, page - 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 24\n      }, this), pages.map(p => /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        active: p === page,\n        onClick: () => setCurrentPage(p),\n        children: p + 1\n      }, p, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }, this)), page < totalPages - 1 && /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => setCurrentPage(page + 1),\n        children: \">\"\n      }, page + 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 39\n      }, this), page < totalPages - 1 && /*#__PURE__*/_jsxDEV(Pagination.Item, {\n        onClick: () => setCurrentPage(totalPages - 1),\n        children: \">>\"\n      }, totalPages, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Pager, \"YV2CDYY7cQFpipI+kuFrPJEhLgk=\");\n\n_c = Pager;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pager\");","map":{"version":3,"sources":["/home/abrikos/WebstormProjects/math/src/components/Pager.js"],"names":["Pagination","React","useEffect","useState","PropTypes","Pager","propTypes","count","number","isRequired","filter","object","onPageChange","func","props","pages","setPages","page","setPage","totalPages","Math","ceil","limit","paginationLength","calcPages","setCurrentPage","p","f","skip","pgs","from","floor","to","i","push","length","map"],"mappings":"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","sourcesContent":["import {Pagination} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\n\nPager.propTypes = {\n    count: PropTypes.number.isRequired,\n    filter: PropTypes.object.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n};\n\n\nexport default function Pager(props) {\n    const [pages, setPages] = useState([]);\n    const [page, setPage] = useState(0);\n    const totalPages = Math.ceil(props.count / (props.filter.limit || 10));\n    const paginationLength = 5;\n\n    useEffect(calcPages, [])\n\n\n    function setCurrentPage(p) {\n        if (p < 0 || p >= totalPages) return;\n        calcPages(p);\n        const f = {...props.filter};\n        f.skip = f.limit * p;\n        setPage(p);\n        props.onPageChange(f)\n    }\n\n    function calcPages(page) {\n        if (!page) page = 1;\n        let pgs = [];\n        const from = paginationLength * Math.floor(page / paginationLength);\n\n        const to = from + paginationLength > totalPages ? totalPages : from + paginationLength;\n        for (let i = from; i < to; i++) {\n            pgs.push(i)\n        }\n        setPages(pgs)\n    }\n\n    if (pages.length < 2) return <div></div>;\n    return <div className=\"d-flex justify-content-center\">\n        <Pagination>\n            {page >= paginationLength && <Pagination.Item key={0} onClick={() => setCurrentPage(0)}>\n                &lt;&lt;\n            </Pagination.Item>}\n\n            {!!page && <Pagination.Item key={page - 1} onClick={() => setCurrentPage(page - 1)}>\n                &lt;\n                {/*<Pagination.Link onClick={() => setCurrentPage(page - 1)}> &lt; </Pagination.Link>*/}\n            </Pagination.Item>}\n\n            {pages.map(p => <Pagination.Item key={p} active={p === page} onClick={() => setCurrentPage(p)}>\n                {/*<Pagination.Link onClick={() => setCurrentPage(p)}>*/}\n                {p + 1}\n                {/*</Pagination.Link>*/}\n            </Pagination.Item>)}\n\n            {page < totalPages - 1 && <Pagination.Item key={page + 1} onClick={() => setCurrentPage(page + 1)}>\n                &gt;\n            </Pagination.Item>}\n\n            {page < totalPages - 1 && <Pagination.Item key={totalPages} onClick={() => setCurrentPage(totalPages - 1)}>\n                >>\n            </Pagination.Item>}\n\n        </Pagination>\n    </div>\n\n}\n"]},"metadata":{},"sourceType":"module"}