{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/abrikos/WebstormProjects/math/src/components/inputModel/InputModel.js\",\n    _s = $RefreshSig$();\n\nimport { Form, FormControl } from \"react-bootstrap\";\nimport MarkdownEditor from \"components/markdown-editor/MarkdownEditor\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./input-model.sass\";\nimport PropTypes from \"prop-types\";\nimport InputHasMany from \"components/inputModel/InputHasMany\";\nimport AdminLink from \"components/AdminLink\";\nimport InputDatePicker from \"components/inputModel/InputDatePicker\";\nInputModel.propTypes = {\n  model: PropTypes.object.isRequired,\n  field: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  relation: PropTypes.string\n};\nexport default function InputModel(props) {\n  _s();\n\n  const [list, setList] = useState([]);\n  useEffect(init, []);\n\n  function init() {\n    if (!props.field.options.ref) return;\n    const filter = {\n      order: {}\n    };\n    filter.sort = props.field.options.sort;\n    console.log(props.field.options.ref.toLowerCase(), filter);\n    props.store.api(`/${props.field.options.ref.toLowerCase()}/list`, filter).then(res => setList(res.list)).catch(console.error);\n  }\n\n  let input = /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      name: props.field.name,\n      defaultValue: props.model[props.field.name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), !!props.errors[props.field.name] && /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: \"zzzz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 17\n  }, this);\n\n  if (props.field.options.select) input = /*#__PURE__*/_jsxDEV(Form.Control, {\n    name: props.field.name,\n    defaultValue: props.model[props.field.name],\n    type: \"select\",\n    children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), props.field.options.select.map((v, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n      value: v.value || i,\n      children: v.label || v\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 51\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 45\n  }, this);\n  if (props.field.type === 'Date') input = /*#__PURE__*/_jsxDEV(InputDatePicker, {\n    value: props.model[props.field.name],\n    name: props.field.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 53\n  }, this);\n  if (props.field.type === 'Boolean') input = /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"checkbox\",\n    name: props.field.name,\n    defaultChecked: props.model[props.field.name],\n    className: \"m-2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n\n  if (props.field.options.control === 'markdown') {\n    input = /*#__PURE__*/_jsxDEV(MarkdownEditor, {\n      name: props.field.name,\n      value: props.model[props.field.name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this);\n  }\n\n  if (props.field.options.ref && list.length > 0) {\n    input = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"select\",\n        name: props.field.name,\n        defaultValue: props.model[props.field.name] && props.model[props.field.name].id,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), list.map(l => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: l.id,\n          children: l[props.field.options.property || 'name']\n        }, l.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 28\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 22\n      }, this), props.model[props.field.name] && /*#__PURE__*/_jsxDEV(AdminLink, {\n        model: props.model[props.field.name],\n        isAdmin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this);\n  }\n\n  if (['hasMany', 'virtual'].includes(props.field.type)) {\n    input = /*#__PURE__*/_jsxDEV(InputHasMany, {\n      value: props.model[props.field.name],\n      list: list,\n      store: props.store\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this);\n  }\n\n  if (props.field.type === 'Array') {\n    input = 'Array INPUT under construction';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-model\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [props.field.options.label || props.field.name, \" \", /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-black-50\",\n        children: props.field.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), input, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.errors[props.field.name]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 12\n  }, this);\n}\n\n_s(InputModel, \"ZBNfaudzy8bVxb8UgkyyMnLdlWY=\");\n\n_c = InputModel;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputModel\");","map":{"version":3,"sources":["/home/abrikos/WebstormProjects/math/src/components/inputModel/InputModel.js"],"names":["Form","FormControl","MarkdownEditor","React","useEffect","useState","PropTypes","InputHasMany","AdminLink","InputDatePicker","InputModel","propTypes","model","object","isRequired","field","errors","relation","string","props","list","setList","init","options","ref","filter","order","sort","console","log","toLowerCase","store","api","then","res","catch","error","input","name","select","map","v","i","value","label","type","control","length","id","l","property","includes"],"mappings":"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","sourcesContent":["import {Form, FormControl} from \"react-bootstrap\";\nimport MarkdownEditor from \"components/markdown-editor/MarkdownEditor\";\nimport React, {useEffect, useState} from \"react\";\nimport \"./input-model.sass\"\n\nimport PropTypes from \"prop-types\";\nimport InputHasMany from \"components/inputModel/InputHasMany\";\nimport AdminLink from \"components/AdminLink\";\nimport InputDatePicker from \"components/inputModel/InputDatePicker\";\n\nInputModel.propTypes = {\n    model: PropTypes.object.isRequired,\n    field: PropTypes.object.isRequired,\n    errors: PropTypes.object,\n    relation: PropTypes.string,\n};\n\nexport default function InputModel(props) {\n    const [list, setList] = useState([])\n\n    useEffect(init, [])\n\n    function init() {\n        if (!props.field.options.ref) return;\n        const filter = {order: {}}\n        filter.sort = props.field.options.sort;\n        console.log(props.field.options.ref.toLowerCase(), filter)\n        props.store.api(`/${props.field.options.ref.toLowerCase()}/list`, filter)\n            .then(res => setList(res.list))\n            .catch(console.error)\n    }\n\n    let input = <span>\n        <FormControl name={props.field.name} defaultValue={props.model[props.field.name]}/>\n        {!!props.errors[props.field.name] && <Form.Control.Feedback type=\"invalid\">zzzz</Form.Control.Feedback>}\n    </span>\n\n    if (props.field.options.select) input = <Form.Control name={props.field.name} defaultValue={props.model[props.field.name]} type=\"select\">\n        <option></option>\n        {props.field.options.select.map((v, i) => <option key={i} value={v.value || i}>{v.label || v}</option>)}\n    </Form.Control>\n\n    if (props.field.type === 'Date') input =        <InputDatePicker value={props.model[props.field.name]} name={props.field.name}  />\n    if (props.field.type === 'Boolean') input =\n        <input type=\"checkbox\" name={props.field.name} defaultChecked={props.model[props.field.name]} className=\"m-2\"/>\n    if (props.field.options.control === 'markdown') {\n        input = <MarkdownEditor name={props.field.name} value={props.model[props.field.name]}/>\n    }\n\n    if (props.field.options.ref && list.length > 0) {\n        input = <div><Form.Control type=\"select\" name={props.field.name}\n                                   defaultValue={props.model[props.field.name] && props.model[props.field.name].id}>\n            <option></option>\n            {list.map(l => <option key={l.id} value={l.id}>{l[props.field.options.property || 'name']}</option>)}\n        </Form.Control>\n            {props.model[props.field.name] && <AdminLink model={props.model[props.field.name]} isAdmin={true}/>}\n        </div>\n    }\n    if (['hasMany', 'virtual'].includes(props.field.type)) {\n        input = <InputHasMany value={props.model[props.field.name]} list={list} store={props.store}/>\n    }\n\n    if (props.field.type === 'Array') {\n        input = 'Array INPUT under construction'\n    }\n\n    return <div className=\"input-model\">\n        <div>{props.field.options.label || props.field.name} <small\n            className=\"text-black-50\">{props.field.name}</small></div>\n        {input}\n        <div>{props.errors[props.field.name]}</div>\n\n    </div>\n\n}\n"]},"metadata":{},"sourceType":"module"}